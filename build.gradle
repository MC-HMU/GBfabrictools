plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = 16
targetCompatibility = 16

ext.Versions = new Properties()
Versions.load(file("Versionfiles/mcversion-21w37a.properties").newReader())

archivesBaseName = "GBfabrictools"

// No, we don't want that in this case, as we want to be able to develop a new
// version while leaving all current mods on the old version.
// version = "${Versions['gbfabrictools_version']}"
version = "1.3.4+${Versions['minecraft_version']}"

minecraft {
	refmapName = "de-guntram-mcmod-fabrictools-refmap.json";
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

dependencies {
    minecraft  "com.mojang:minecraft:${Versions['minecraft_version']}"
    mappings   "net.fabricmc:yarn:${Versions['yarn_mappings']}:v2"
    modImplementation "net.fabricmc:fabric-loader:${Versions['loader_version']}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${Versions['fabric_version']}"
}


// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

group = "de.guntram.mcmod"
publishing {
    publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
			builtBy remapJar
			}
		}
    }
    repositories {
        maven {
            url = "file://tmp/mymavenrepo"
        }
    }
}

task mypublish(dependsOn: publish, type: Exec) {
    commandLine "rsync", "-av", "/tmp/mymavenrepo/", "maven@minecraft.guntram.de:/var/www/html/maven/"
}
