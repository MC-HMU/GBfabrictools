plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
}

apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.Versions = new Properties()
Versions.load(file("Versionfiles/mcversion-1.16.2.properties").newReader())

archivesBaseName = "GBfabrictools"

// No, we don't want that in this case, as we want to be able to develop a new
// version while leaving all current mods on the old version.
// version = "${Versions['gbfabrictools_version']}"
version = "1.3.1+${Versions['minecraft_version']}"

minecraft {
	refmapName = "de-guntram-mcmod-fabrictools-refmap.json";
}

processResources {
	inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}
	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

dependencies {
    minecraft  "com.mojang:minecraft:${Versions['minecraft_version']}"
    mappings   "net.fabricmc:yarn:${Versions['yarn_mappings']}:v2"
    modCompile "net.fabricmc:fabric-loader:${Versions['loader_version']}"
    modCompile "net.fabricmc.fabric-api:fabric-api:${Versions['fabric_version']}"
}


// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

group = "de.guntram.mcmod"
uploadArchives {
    repositories {
        mavenDeployer {
	    repository(url: "file://localhost/tmp/mymavenrepo")
        }
    }
}

task publish(dependsOn: uploadArchives, type: Exec) {
    commandLine "rsync", "-av", "/tmp/mymavenrepo/", "maven@minecraft.guntram.de:/var/www/html/maven/"
}
